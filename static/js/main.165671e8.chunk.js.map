{"version":3,"sources":["weather/weathercard.js","weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","temp","humidity","pressure","weathermood","name","speed","country","sunset","React","useState","weatherState","setWeatheState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","SetsearchValue","tepmInfo","SetTepmInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autofocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.165671e8.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst Weathercard = ({\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  }) => {\r\n    const [weatherState, setWeatheState] = React.useState(\"\");\r\n\r\n        useEffect(()=>{\r\n            if(weathermood){\r\n                switch (weathermood) {\r\n                    case \"Clouds\":\r\n          setWeatheState(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          setWeatheState(\"wi-fog\");\r\n          break;\r\n        case \"Clear\":\r\n          setWeatheState(\"wi-day-sunny\");\r\n          break;\r\n        case \"Mist\":\r\n          setWeatheState(\"wi-dust\");\r\n          break;\r\n                \r\n                    default:\r\n                        setWeatheState(\"wi-day-sunny\");\r\n                        break;\r\n                }\r\n            }\r\n\r\n        },[weathermood]);\r\n\r\n\r\n\r\n        let sec = sunset;\r\n        let date = new Date(sec * 1000);\r\n        let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n  return (\r\n   <>\r\n    <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n            <i className={`wi ${weatherState}`}></i>\r\n        </div>\r\n        <div className=\"weatherInfo\">\r\n            <div className=\"temperature\">\r\n                <span>{temp}&deg;</span>\r\n            </div>\r\n            <div className=\"description\">\r\n                <div className=\"weatherCondition\">{weathermood}</div>\r\n                <div className=\"place\">{name} {country}</div>\r\n\r\n            </div>\r\n        </div>\r\n        <div className=\"date\">{new Date().toLocaleString()}</div>\r\n        <div className=\"extra-temp\">\r\n            <div className=\"temp-info-minmax\">\r\n                <div className=\"two-sided-section\">\r\n                    <p><i className={\"wi wi-sunset\"}></i></p>\r\n                    <p className=\"extra-info-leftside\">\r\n                    {timeStr}<br/>\r\n                        sunset\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"two-sided-section\">\r\n                    <p><i className={\"wi wi-rain\"}></i></p>\r\n                    <p className=\"extra-info-leftside\">\r\n                    {humidity} PM<br/>\r\n                        Humidity\r\n                    </p>\r\n                </div> \r\n            </div>\r\n            <div className=\"weather-extra-info\">\r\n            <div className=\"two-sided-section\">\r\n                    <p><i className={\"wi wi-rain\"}></i></p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {pressure}<br/>\r\n                        Pressure\r\n                    </p>\r\n                </div> \r\n\r\n                <div className=\"two-sided-section\">\r\n                    <p><i className={\"wi wi-rain\"}></i></p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {speed}<br/>\r\n                        speed\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    </article>\r\n   </>\r\n  );\r\n};\r\n\r\nexport default Weathercard;","\r\nimport React, { useEffect, useState } from 'react'\r\nimport Weathercard from \"./weathercard\";\r\nimport  './style.css';\r\n\r\nconst Temp = () => {\r\n    const [searchValue,SetsearchValue]=useState(\"pune\");\r\n    const [tepmInfo,SetTepmInfo]=useState({});\r\n\r\n    const getWeatherInfo = async () => {\r\n        try{\r\n           \r\n            let url=` https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&appid=aeab2f578c9b40eba407d684eb0c90e5`;\r\n            const res = await fetch(url);\r\n            const data =await res.json();\r\n            const {temp, pressure, humidity} = data.main;\r\n            const {main: weathermood} = data.weather[0];\r\n            const {name} = data;\r\n            const {speed}=data.wind;\r\n            const {country, sunset}=data.sys;\r\n\r\n            const myNewWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset,\r\n              };  \r\n              SetTepmInfo(myNewWeatherInfo);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n      }, []);\r\n  return (\r\n   <>\r\n   <div className=\"wrap\">\r\n       <div className=\"search\">\r\n           <input type=\"search\" placeholder=\"search...\" autofocus id=\"search\" value={searchValue} onChange={(e)=>SetsearchValue(e.target.value)} className=\"searchTerm\"/>\r\n            <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>Search</button>\r\n       </div>\r\n   </div>\r\n   <Weathercard {...tepmInfo} />\r\n\r\n   </>\r\n  );\r\n};\r\n\r\nexport default Temp;\r\n\r\n\r\n\r\n\r\n","import React from 'react'\nimport Temp from \"./weather/temp\";\n\nconst App = () => {\n  return (\n   <>\n   <Temp/>\n   </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}